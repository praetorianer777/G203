// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRACKEDMOTORTHROTTLE_THEMACHINEEU_H_
#define FLATBUFFERS_GENERATED_TRACKEDMOTORTHROTTLE_THEMACHINEEU_H_

#include "flatbuffers/flatbuffers.h"

namespace themachineeu {

struct TrackedMotorThrottle;

struct TrackedMotorThrottle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEFTMOTOR = 4,
    VT_RIGHTMOTOR = 6
  };
  float leftMotor() const {
    return GetField<float>(VT_LEFTMOTOR, 0.0f);
  }
  float rightMotor() const {
    return GetField<float>(VT_RIGHTMOTOR, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LEFTMOTOR) &&
           VerifyField<float>(verifier, VT_RIGHTMOTOR) &&
           verifier.EndTable();
  }
};

struct TrackedMotorThrottleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_leftMotor(float leftMotor) {
    fbb_.AddElement<float>(TrackedMotorThrottle::VT_LEFTMOTOR, leftMotor, 0.0f);
  }
  void add_rightMotor(float rightMotor) {
    fbb_.AddElement<float>(TrackedMotorThrottle::VT_RIGHTMOTOR, rightMotor, 0.0f);
  }
  explicit TrackedMotorThrottleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TrackedMotorThrottleBuilder &operator=(const TrackedMotorThrottleBuilder &);
  flatbuffers::Offset<TrackedMotorThrottle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrackedMotorThrottle>(end);
    return o;
  }
};

inline flatbuffers::Offset<TrackedMotorThrottle> CreateTrackedMotorThrottle(
    flatbuffers::FlatBufferBuilder &_fbb,
    float leftMotor = 0.0f,
    float rightMotor = 0.0f) {
  TrackedMotorThrottleBuilder builder_(_fbb);
  builder_.add_rightMotor(rightMotor);
  builder_.add_leftMotor(leftMotor);
  return builder_.Finish();
}

inline const themachineeu::TrackedMotorThrottle *GetTrackedMotorThrottle(const void *buf) {
  return flatbuffers::GetRoot<themachineeu::TrackedMotorThrottle>(buf);
}

inline const themachineeu::TrackedMotorThrottle *GetSizePrefixedTrackedMotorThrottle(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<themachineeu::TrackedMotorThrottle>(buf);
}

inline const char *TrackedMotorThrottleIdentifier() {
  return "2TMT";
}

inline bool TrackedMotorThrottleBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TrackedMotorThrottleIdentifier());
}

inline bool VerifyTrackedMotorThrottleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<themachineeu::TrackedMotorThrottle>(TrackedMotorThrottleIdentifier());
}

inline bool VerifySizePrefixedTrackedMotorThrottleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<themachineeu::TrackedMotorThrottle>(TrackedMotorThrottleIdentifier());
}

inline void FinishTrackedMotorThrottleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<themachineeu::TrackedMotorThrottle> root) {
  fbb.Finish(root, TrackedMotorThrottleIdentifier());
}

inline void FinishSizePrefixedTrackedMotorThrottleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<themachineeu::TrackedMotorThrottle> root) {
  fbb.FinishSizePrefixed(root, TrackedMotorThrottleIdentifier());
}

}  // namespace themachineeu

#endif  // FLATBUFFERS_GENERATED_TRACKEDMOTORTHROTTLE_THEMACHINEEU_H_
